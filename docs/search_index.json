[
["index.html", "R for Environmental Health Research Workshop for Climate and Health students at Columbia Mailman School of Public Health Chapter 1 Prerequisites", " R for Environmental Health Research Workshop for Climate and Health students at Columbia Mailman School of Public Health Brooke Anderson April 9, 2019 Chapter 1 Prerequisites 1.0.1 Overview Based on requests from some of the students for this workshop, I’ve focused here on a few topics relevant to environmental health research: organizing projects and tracking them with version control, creating your own packages, and collecting and processing large datasets relevant to environmental health research. You can download the slides from the workshop by clicking here. There are some additional topics in R that would also be useful for environmental health researchers that I won’t cover here. I would, however, suggest that you look at the latest on tidyverse functions for cleaning and visualizing data (the dplyr and ggplot2 packages are at the heart of this), new developments on working with geospatial data with the sf package, creating interactive graphics with htmlwidgets, and creating reports, blogs, and books through the rmarkdown framework. In the conclusion to this booklet, I’ll provide some references for learning more about all of these topics. 1.0.2 Set-up I am assuming that you already have R and RStudio installed on your computer. You may want to check that you have a recent version of both, and if not, update you version before the workshop. Some of the packages and RStudio tools we’ll be using will require newer versions of R and RStudio to work. You can run sessionInfo() in R to find out the version of R you have installed. Compare this version to the latest R release version listed at the Comprehensive R Archive Network (CRAN)1 To try out the examples, you will also need a bit more set-up: Download git Get a GitHub account Install some R packages Download example R Project This section will walk you through each step. Download git In the workshop, you will learn how to use git.[^git. Open-source version control software …] To try the examples, you will need to install git to your computer and make sure that your installation of RStudio can find this software, so you can use git for version control for R Projects. … Get a GitHub account You’ll also learn how to share and collaborate on an R Project using GitHub.2 You will need to get a GitHub account to be able to post repositories on GitHub. … Install some R packages This booklet uses a number of R packages beyond base R. To install all the packages that you’ll need, run the following code in your version of R: install.packages(c(&quot;readr&quot;, &quot;ggplot2&quot;, &quot;forcats&quot;, &quot;magrittr&quot;, &quot;dplyr&quot;, &quot;lubridate&quot;, &quot;sf&quot;, &quot;tigris&quot;, &quot;DT&quot;, &quot;plotly&quot;, &quot;leaflet&quot;, &quot;flexdashboard&quot;, &quot;tidyr&quot;, &quot;stringr&quot;)) Download example R Project I’ve created a repository on GitHub. You can find this example repository by clicking here. On the page takes you to, click on the “Clone or download” button and then select “Download ZIP”. This will download a single zipped file to your computer. When you unzip the file, it will be a special type of directory, an R Project directory. To open the R Project and start on the examples, open RStudio, then go to “File” -&gt; “Open Project”. A pop-up window will open to let you navigate through your files and find an R Project to open. Navigate to the directory you downloaded, which should be called “columbia_env_health_examples” and doubleclick on the file in this directory called “columbia_env_health_examples.Rproj”. This will open the project. In the “Files” pane of RStudio, you should see some subdirectories for “R” and “data”. These have the example R code and data, respectively, for you to try the examples in this booklet. The code in each of the R files should run independently, including the code to load all required packages. Figure 1.1 shows what this package should look like once you’ve downloaded and opened it, as well as opened the “plot.R” file in the project’s “R” subdirectory. Figure 1.1: What the example R Project for this booklet should look like once you’ve downloaded and opened it, as well as opened the ‘plot.R’ file in the project’s ‘R’ subdirectory. Click on the Next button (or navigate using the links at the top of the page) to continue. Comprehensive R Archive Network (CRAN). …↩ GitHub. An online platform for directories tracked with the version control software git. This platform has become very popular for sharing code projects, as well as collaborating across a team on developing code and software. Other online git platforms exist and are used by some researchers, including GitLab. Once you’ve mastered using GitHub, you should be able to easy transfer those skills to other platforms like GitLab.↩ "],
["organize.html", "Chapter 2 Organize 2.1 R Projects 2.2 Directory organization 2.3 Learn more", " Chapter 2 Organize If you are using R to write for larger projects, including research for academic papers and theses, you should start putting some thought into how you organize your research files, including raw data, cleaned data, coding scripts for analysis, and output like paper drafts and figures. 2.1 R Projects RStudio allows you to create “Projects”, which help with this organization. An R Project is very simple—it’s just a file directory, with an extra subdirectory added to the directory [with settings?]. This directory is saved as a dot file3, so you probably won’t be able to see it listed if you look at the directory contents using your [file viewer?]. If you’d like to see the listing (or delete it by hand, although you likely won’t ever need to do this), check the settings for your [file viewer?], and see if you have the option to show all files. Alternatively, you can use the “list” command with the “all” option (ls -a) at a Bash shell to view all files and subdirectories in a directory. You can either create an R Project as a new directory or convert an existing directory into an R Project. To do either, in RStudio go to the “File” menu and select “New Project”. You’ll then have the option to either create a new directory that’s an R Project or to search through your computer’s files to find an existing directory to make into an R Project. Once you’ve created an R Project, you can open it in RStudio; opening an R Project will set the project’s directory as your working directory, opening a “Files” window with all the subdirectories and files in the project directory and allowing you to run code with relative filenames4 from the project’s directory. If you share the R Project with someone else,5 he or she will also be able to open the R project using RStudio. One benefit of R Projects is that it is very easy to initialize them as git repositories. A later section (“Track”) will go over how to initialize and use git version control for R Projects. You will also definitely want to use an R Project for any R package you write, as this will introduce a lot of functionality that “plays well” with the devtools package to make it easier to write, build, and publish an R package [?]. 2.2 Directory organization … 2.2.1 Keeping things tidy My desk at work is very messy, with lots of paper printouts piled up. My car and my closet aren’t terribly tidy, either. But I do keep my project directories very tidy, and I strongly recommend the practice. This goes beyond “well-organized”, which we just covered (putting all project files in one directory, using subdirectories to divide up files in a project, using consistent names for project file directories, etc.). Keeping a project directory “tidy” means having only one version of each file. Often, as you develop a project, especially when collaborators are involved, you can end up with many versions of a file. For example, you may have the draft of a journal article’s text saved in some versions with the file name reflecting the date of the draft (“draft_may_12.docx”), some versions that include the initials of people who reviewed it (“paper_draft_ba_rp_mb2.docx”), and so on. This type of organization—having multiple versions of project files, with the file names meant to help you keep track of them—results in very cluttered and hard-to-manage project directories. Instead, at any given moment, each of your project directories should have only one version of each project file. You certainly won’t want to lose information from edits and changes to the files along the way, so it’s smart to use some type of version control system[version control system. …] on each project directory. This will allow you to track the changes you’ve made to each file and to go back and revisit the file at any moment in the project’s history. A later section of this booklet will describe how you can use git for version control for R projects. 2.2.2 Avoiding repetition One key to efficient organization is to avoid repetition.6 In practice, it often happens that you’re using the same code across several projects. For example, say you have some code that calculates the apparent temperature from air temperature and some measure of dewpoint temperature. If you have organized your project files to have one directory per paper, with all the associated code for a paper within the project’s directory, then you may find you’re often copying and pasting the code to calculate apparent temperature into different directories. This situation makes for a tricky balance—you want to organize your files and have a separate directory for each project, but cutting and pasting code can be a recide for disaster. Each time you move the code, there’s a chance for an error to slip in. Also, what if you want to make a change in the code? Say you hear about a better algorithm for calculating apparent temperature? You will either need to go through all of your projects that use that code and change the code everywhere, or you will have to settle for different projects using different algorithms. This means it’s time to start thinking about writing your own R package.[(???)*R package** …] You do not have to publish every R package you write—it’s fine to just use it yourself and not share it more widely. Regardless, a package is the right place to store related code that you use often, as well as documentation (and possibly tests) to go with that code. A later section of this booklet will go over a bit about how to write your own R packages, as well as references for learning more about package development. 2.3 Learn more [R Reproc. Research] is an excellent book with advice on improving the reproducibility of projects using R, including academic research projects. A few good articles have come out recently that describe project organization within the scientific fields of [biology] and [archaeology]. [One has links to example repositories?] Other papers discuss project organization in the context of reproducibility, presenting the idea of creating a research compendium7 for scientific publications. dot file. …↩ relative filename. …↩ One way to do this would be to zipped the directory into a single file and share it by email. Another is to use git version control, post the directory to GitHub, and share the directory from there.↩ In programming, you’ll often hear this advice as “Do Not Repeat Yourself”.↩ research compendium. …↩ "],
["track.html", "Chapter 3 Track 3.1 git 3.2 GitHub 3.3 Terminal 3.4 Learn more", " Chapter 3 Track Years ago, I tried to learn to use git version control software with R, and it was a total fail. Maybe it’s just me, but I found it really hard to wrap my head around the text-dominated, command-line interface classically used for git. However, RStudio now includes tools that provide a GUI-style8 interface to most of the functionality you’ll need from git for R-based projects. I highly recommend trying git by using it through RStudio first, and then once you develop a mental map of what’s going on, it’s much easier to transfer partially or completely to running git from a shell. In this part, I’ll discuss both git (the software that allows you to track changes to your R projects), as well as GitHub (an online platform for sharing and collaborating on version-controlled projects). I’ll also discuss, near the end, how to use either a Bash Shell or the git2r package to do some one-off git tasks that can’t be done directly through the RStudio GUI-style git interface. 3.1 git 3.2 GitHub 3.3 Terminal I find that, for 90% of what I want to do in git, I can do it through the GUI-style interface RStudio provides for git. The few exceptions include: Setting a remote and doing the initial push to that remote Reverting a commit Creating a new branch Merging two branches For these tasks, I usually open up a Bash Shell9 and run a git command from there. However, there’s also a package called git2r that lets you run any of these git commands from the R command line, so you could also do all these (fairly rare) tasks from the R console without ever opening a Bash Shell, if you master the git2r package. 3.3.1 Accessing a Bash Shell 3.3.2 git2r package 3.4 Learn more Hadley Wickham’s excellent book on R Packages includes a great chapter on Git and GitHub. While the chapter (and book) is focused on R packages specifically, the guidance in this chapter would apply to any R Project directory under version control, whether or not the R Project is for a package. This book is available free online or as a print version through O’Reilly (and carried at many Barnes &amp; Nobles). If you’re using git a lot for R projects, it’s helpful to have some resources available with more on using git through a Bash Shell. I like the book Pragmatic Guide to Git by Travis Swicegood for a quick, short reference and Git in Practice by Mike McQuaid if I’m trying to dig a bit deeper and figure out how git works. I have also heard good things about Pro Git by Scott Chacon and Ben Straub, which is available for free online. However, these resources are all geared to those using git for its original purpose of tracking changes in software development projects. When you use git to track files for a research project (rather than, for example, for a repository for an R package you’re writing), you may have some needs that don’t come up under software development. A few articles have come out recently that give advice on using git specifically to track research projects—these provide helpful advice specific to this use of git, which you won’t find in books about git. StackOverflow10 is also invaluable to quickly look up how to do something in git. There are many tasks in git where I never remember the command, but I do remember enough about what the functionality is called to be able to quickly use Google to find a StackOverflow thread that gives me the call. Reading through a book or tutorial on git, even if you don’t remember the commands you learn, can help you learn some of the vocabulary11, and knowing that vocabulary will help you search for answers when you need them. Finally, if you can find a way to do it, I think the best and easiest way to learn to use git and GitHub with R is to collaborate with someone who’s used these tools before. Most of the time, these tools are very easy to use, but the small percent of the time that they’re not, it can be significant stumbling blocks (in terms of the time it takes to figure out the fix) the first few times you use the tools, while someone familiar with them and working on the project can diagnose and get you over those bumps as you learn the ropes. Graphical User Interface (GUI). …↩ Bash Shell. A … . “Bash” stands for “Bourne-Again Shell”, Stephen Bourne, a Unix developer.↩ StackOverflow. …↩ Some good git-related words to know to help you search for calls for rarer tasks: “commit”, “branch”, “merge”, “revert”, “push”, “pull”, “merge conflict”, “remote”, “origin”, “master”, “fork”, “clone”, “pull request”.↩ "],
["package.html", "Chapter 4 Package 4.1 R packages 4.2 Publishing 4.3 Checking 4.4 Try it out 4.5 Learn more", " Chapter 4 Package As with many other things in R, the threshold of complexity for writing your own package has recently lowered dramatically. If you are writing some of your own functions in R to use for your research, and you’ve become comfortable with writing functions, you should try putting them in an R package. You don’t have to share this package through publishing it on CRAN or another repository—instead, it’s fine to start by just writing packages for your own use, or for your research group’s private use. However, once you start writing packages, you will see how straightforward it is, and you may want to take the extra steps to prepare your package for CRAN and submit it. 4.1 R packages 4.1.1 R code [Where to put it] [How to add documentation] 4.1.2 DESCRIPTION file License 4.1.3 Other package components So far, I’ve described the barebones elements you’ll need to have to create a very minimalist package. There are, however, a number of other elements you’ll often want to add to the package. As with the R code for package functions and the DESCRIPTION file, there is a specific location and format required for each of these elements within an R package. Some of the most common components you’ll want to add are: Example data. Vignettes. Unit tests. To help you set up these extra components, you may want to take a look at the use_* family of functions in the usethis (Wickham and Bryan 2018) package12 For example, if you want to include example data in your package, you should check out the use_data function, while if you want to add unit tests to your package, check out the use_test function. When you run one of these, you’ll notice that the function adds files and subdirectories when needed to your R package directory. This may throw you at first, since most R functions don’t make changes to your file directory, but you’ll need those added files to add the package components, and it’s much easier to remember a single function call to run when you need to add one than to remember all the details of which files and in what structure need to be added. 4.2 Publishing 4.2.1 Why publish your packages? 4.2.2 Where to publish packages 4.2.3 Extra steps for publishing If you want to submit your package to CRAN, you’ll need to take a few extra steps to get it ready. These steps aren’t necessary for a package you plan to just use privately, but they wouldn’t be a bad idea to try to do even in that case. First, you’ll need to make sure that the functions in your package are comprehensively documented. [What are requirements for this for CRAN?] In addition to documenting specific functions, you should also consider writing overall tutorials that walk a user through how to use your package in a few example scenarios. vignette13 You will also need to make sure that your package can run on different operating systems. If your package only has functions written exclusively in R, and doesn’t interact with [the computer system?] or other programs on your computer, this shouldn’t be an issue. However, you should still check. [Travis CI, winbuilder] [CRAN checks] 4.3 Checking 4.4 Try it out Create a new R Project for an R package Move a function into the right place in the package Edit the DESCRIPTION file as needed Build the package Add example data into the right place in the package Add some unit tests for the function Add documentation using roxygen2 notation Add a short vignette 4.5 Learn more One wonderful resource for writing and publishing R packages is the book R Packages by Hadley Wickham. This book is available for a reasonable price in paperback (many Barnes &amp; Nobles carry it in their computer section) and is also available for free online. The author of this book also created and maintains the devtools package14 ROpenSci handbook Official R documentation Coursera, Leanpub Final Words "],
["collect.html", "Chapter 5 Collect 5.1 Open data 5.2 Web services [?] 5.3 ROpenSci 5.4 Learn more", " Chapter 5 Collect For Environmental Health researchers, I think one of the most exciting developments in R recently is how it is changing how we can collect data, both for exposures and outcomes. One direction for this development is how researchers can collect and measure original data from experiments, including through new measurement technologies (e.g., phone-based Apps) and through new or rapidly changing health-related measurements (e.g., metabolomics, flow cytometry) and associated open-source software. R is also facilitating and leveraging rapid developments in how researchers can access and query secondary data, including from [large admin databases?] and [data repositories encouraged or required for some NIH-funded projects]. … This section will provide an introduction to some of the ideas and techniques behind these developments for collecting secondary or public-use data for environmental health research, as well as give you somee directions on where to go to find R packages that facilitate collecting open data from R. 5.1 Open data A range of environmental datasets are available online, especially through national agencies. For example, [NOAA] provides various weather datasets, while USGS has data on water quality, [others] You can visit webpages hosted by these agencies where you can download the datasets you need. However, this process can become tedious if you need lots of datasets, as may be the case for large studies incorporating many cities. Further, downloading the datasets “by hand” is hard to make reproducible, unless you meticiously write down all the steps you took as you visited the website. This means that your process will be harder for you to repeat in the future or for others to replicate. A growing collection of R packages are now available that allow you to download datasets available online directly from R. This means that you can write an R script for your data collection, making this step both better documented and more reproducible. … Further, there are now a number of R packages that provide access to open datasets that the package maintainer collected and processed and is now making available as an R package. [More on R data packages.] 5.1.1 [Admin databases?] Data collected by government groups like EPA, NOAA, USGS. 5.1.2 [Research repositories?] Here, especially health-related data. NIH-supported (e.g., Metabolomics Workbench). NHANES? 5.2 Web services [?] 5.3 ROpenSci One of the best places to explore R packages for accessing open data for science is ROpenSci.15 Many of its packages facilitate access to databases of open data relevant to scientific research that have API access [?]. You can browse through its packages on its Packages page Examples of some packages relevant to collecting data for environmental health research include: bomrang: Australian Government Bureau of Meteorology (‘BOM’) Data Client clifro: Easily Download and Visualise Climate Data from CliFlo dbhydroR: ‘DBHYDRO’ Hydrologic and Water Quality Data essurvey: Download Data from the European Social Survey on the Fly FedData: Functions to Automate Downloading Geospatial Data Available from Several Federated Data Sources camsRad: R Client for CAMS Radiation Service ccafs: CCAFS GCM Data R Client dbhydroR: R interface to the South Florida Water Management District’s DBHYDRO Database biomartr: Genomic Data Retrieval clifro: Easily Download and Visualise Climate Data from CliFlo DataSpaceR: An R Interface to ‘the CAVD DataSpace’ essurvey: Download Data from the European Social Survey on the Fly fingertipsR: Fingertips Data for Public Health getCRUCLdata: Use and Explore ‘CRU’ ‘CL’ v. 2.0 Climatology Elements getlandsat: Get Landsat 8 Data from Amazon Public Data Sets googleLanguageR: Call Google’s ‘Natural Language’ API, ‘Cloud Translation’ API, ‘Cloud Speech’ API and ‘Cloud Text-to-Speech’ API GSODR: Global Surface Summary of the Day (‘GSOD’) Weather Data Client hydroscoper: Interface to the Greek National Data Bank for Hydrometeorological Information MODIStsp: A Tool for Automating Download and Preprocessing of MODIS Land Products Data nasapower: NASA POWER API Client opencage: Interface to the OpenCage API osmdata: Import ‘OpenStreetMap’ Data as Simple Features or Spatial Objects weathercan: Download Weather Data from the Environment and Climate Change Canada Website wateRinfo: Download Time Series Data from Waterinfo.be USAboundariesData: Datasets for the ‘USAboundaries’ package USAboundaries: Historical and Contemporary Boundaries of the United States of America tidyhydat: Extract and Tidy Canadian ‘Hydrometric’ Data stats19: Work with Open Road Traffic Casualty Data from Great Britain smapr: Acquisition and Processing of NASA Soil Moisture Active-Passive (SMAP) Data rWBclimate: A package for accessing World Bank climate data rusda: Interface to USDA Databases rsnps: Get ‘SNP’ (‘Single-Nucleotide’ ‘Polymorphism’) Data on the Web rrricanesdata: Data for Atlantic and east Pacific tropical cyclones since 1998 rrricanes: Web scraper for Atlantic and east Pacific hurricanes and tropical storms ropenaq: Accesses Air Quality Data from the Open Data Platform OpenAQ rnoaa: ‘NOAA’ Weather Data from R rnaturalearth: World Map Data from Natural Earth riem: Accesses Weather Data from the Iowa Environment Mesonet rgpdd: R Interface to the Global Population Dynamics Database rdhs: API Client and Dataset Management for the Demographic and Health Survey (DHS) Data rdefra: Interact with the UK AIR Pollution Database from DEFRA prism: Access Data from the Oregon State Prism Climate Project Cleaning / exploring data: cleanEHR: The Critical Care Clinical Data Processing Tools colocr: Conduct Co-localization Analysis of Fluorescence Microscopy Images cRegulome: Obtain and Visualize Regulome-Gene Expression Correlations in Cancer EndoMineR: Functions to mine endoscopic and associated pathology datasets geoaxe: Split ‘Geospatial’ Objects into Pieces hddtools: Hydrological Data Discovery Tools isdparser: Parse ‘NOAA’ Integrated Surface Data Files visdat: Preliminary Visualisation of Data skimr: A frictionless, pipeable approach to dealing with summary statistics 5.4 Learn more ROpenSci The R Journal CRAN task views? ROpenSci articles? JOSS? ROpenSci. …↩ "],
["process.html", "Chapter 6 Process 6.1 Learn more", " Chapter 6 Process For environmental health research, once you have collected your raw data, you will often need to do a bit of work processing the data before you can apply epidemiological models. As one example, you may pull gridded data16 on an environmental exposure of interest, but need to link it with health data that is aggregated based on administrative boundaries (e.g., counties). As another example, you might have daily temperature data and want to identify the dates of heat waves in a community based on that data. R has some wonderful tools for processing data that are relevant to environmental health research. Here, I’ll focus on tools from a few packages I’ve developed, but in “Learn more”, I’ll also point you to more resources for finding R tools that might be relevant to your own environmental health research projects. I strongly encourage you, as you work through this section, to start thinking about possibly creating your own R packages to solve data processing tasks you commonly face for your research. All the code for the packages I’ll discuss is available on GitHub, so you can look at this code as examples as you think about writing your own packages. 6.1 Learn more CRAN taskviews Bioconductor [taskviews?] ROpenSci [CRAN] One excellent example of CRAN-based packages [?] for processing environmental data is the suite of packages created and maintained by scientists at the United States Geological Survey (USGS)17 This group has a collection of packages, listed at … . The packages include … For a very cool example of using some of these packages for a timely application for environmental health, check out these visualizations of flooding during Hurricanes …, as well as the code used to create them. For biological data, Bioconductor18 can be a great resource for finding packages to process and pull out relevant data. For example, Bioconductor has a large collection of packages for working with biological data collected through flow cytometry, mass spectrometry (e.g., metabolomics), RNA sequencing, [others] gridded data. …↩ United States Geological Survey (USGS). …↩ Bioconductor. …↩ "],
["final-words.html", "Chapter 7 Final Words", " Chapter 7 Final Words "]
]
